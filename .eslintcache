[{"C:\\codebase\\tokopedia-test\\src\\index.js":"1","C:\\codebase\\tokopedia-test\\src\\App.js":"2","C:\\codebase\\tokopedia-test\\src\\reportWebVitals.js":"3","C:\\codebase\\tokopedia-test\\src\\containers\\PokemonsContainer.js":"4","C:\\codebase\\tokopedia-test\\src\\components\\PokemonsList.js":"5","C:\\codebase\\tokopedia-test\\src\\containers\\Navbar.js":"6","C:\\codebase\\tokopedia-test\\src\\pages\\Home.js":"7","C:\\codebase\\tokopedia-test\\src\\components\\NavbarCollapse.js":"8","C:\\codebase\\tokopedia-test\\src\\components\\ButtonNavbarCollapse.js":"9","C:\\codebase\\tokopedia-test\\src\\pages\\Pokebag.js":"10","C:\\codebase\\tokopedia-test\\src\\pages\\PokemonDetail.js":"11","C:\\codebase\\tokopedia-test\\src\\containers\\PokemonDetailContainer.js":"12","C:\\codebase\\tokopedia-test\\src\\components\\PokemonDetailList.js":"13","C:\\codebase\\tokopedia-test\\src\\services\\GqlServices.js":"14","C:\\codebase\\tokopedia-test\\src\\services\\RestServices.js":"15","C:\\codebase\\tokopedia-test\\src\\helpers\\typeColors.js":"16","C:\\codebase\\tokopedia-test-source\\src\\index.js":"17","C:\\codebase\\tokopedia-test-source\\src\\App.js":"18","C:\\codebase\\tokopedia-test-source\\src\\reportWebVitals.js":"19","C:\\codebase\\tokopedia-test-source\\src\\pages\\Pokebag.js":"20","C:\\codebase\\tokopedia-test-source\\src\\containers\\Navbar.js":"21","C:\\codebase\\tokopedia-test-source\\src\\pages\\Home.js":"22","C:\\codebase\\tokopedia-test-source\\src\\pages\\PokemonDetail.js":"23","C:\\codebase\\tokopedia-test-source\\src\\containers\\PokemonsContainer.js":"24","C:\\codebase\\tokopedia-test-source\\src\\containers\\PokemonDetailContainer.js":"25","C:\\codebase\\tokopedia-test-source\\src\\components\\NavbarCollapse.js":"26","C:\\codebase\\tokopedia-test-source\\src\\components\\PokemonsList.js":"27","C:\\codebase\\tokopedia-test-source\\src\\components\\PokemonDetailList.js":"28","C:\\codebase\\tokopedia-test-source\\src\\components\\ButtonNavbarCollapse.js":"29","C:\\codebase\\tokopedia-test-source\\src\\services\\GqlServices.js":"30","C:\\codebase\\tokopedia-test-source\\src\\services\\RestServices.js":"31","C:\\codebase\\tokopedia-test-source\\src\\helpers\\typeColors.js":"32"},{"size":438,"mtime":1608557300932,"results":"33","hashOfConfig":"34"},{"size":1312,"mtime":1608659646057,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"34"},{"size":1857,"mtime":1608566403303,"results":"37","hashOfConfig":"34"},{"size":4849,"mtime":1608554741989,"results":"38","hashOfConfig":"34"},{"size":3570,"mtime":1608660106905,"results":"39","hashOfConfig":"34"},{"size":3762,"mtime":1608659646057,"results":"40","hashOfConfig":"34"},{"size":1415,"mtime":1608551475990,"results":"41","hashOfConfig":"34"},{"size":1708,"mtime":1608538203666,"results":"42","hashOfConfig":"34"},{"size":826,"mtime":1608538203666,"results":"43","hashOfConfig":"34"},{"size":10600,"mtime":1608717622157,"results":"44","hashOfConfig":"34"},{"size":1556,"mtime":1608659733162,"results":"45","hashOfConfig":"34"},{"size":10840,"mtime":1608659922880,"results":"46","hashOfConfig":"34"},{"size":822,"mtime":1608565217715,"results":"47","hashOfConfig":"34"},{"size":216,"mtime":1608570266871,"results":"48","hashOfConfig":"34"},{"size":988,"mtime":1608624998338,"results":"49","hashOfConfig":"34"},{"size":438,"mtime":1608557300932,"results":"50","hashOfConfig":"51"},{"size":1468,"mtime":1608740618975,"results":"52","hashOfConfig":"51"},{"size":362,"mtime":499162500000,"results":"53","hashOfConfig":"51"},{"size":9701,"mtime":1608777193838,"results":"54","hashOfConfig":"51"},{"size":3570,"mtime":1608660106905,"results":"55","hashOfConfig":"51"},{"size":3768,"mtime":1608740618975,"results":"56","hashOfConfig":"51"},{"size":10603,"mtime":1608778901823,"results":"57","hashOfConfig":"51"},{"size":1857,"mtime":1608566403303,"results":"58","hashOfConfig":"51"},{"size":1605,"mtime":1608778681992,"results":"59","hashOfConfig":"51"},{"size":1415,"mtime":1608551475990,"results":"60","hashOfConfig":"51"},{"size":5044,"mtime":1608744286599,"results":"61","hashOfConfig":"51"},{"size":13107,"mtime":1608778740075,"results":"62","hashOfConfig":"51"},{"size":1708,"mtime":1608538203666,"results":"63","hashOfConfig":"51"},{"size":822,"mtime":1608565217715,"results":"64","hashOfConfig":"51"},{"size":216,"mtime":1608570266871,"results":"65","hashOfConfig":"51"},{"size":988,"mtime":1608624998338,"results":"66","hashOfConfig":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"1nkefvz",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"69"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"181xrmo",{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"C:\\codebase\\tokopedia-test\\src\\index.js",[],["138","139"],"C:\\codebase\\tokopedia-test\\src\\App.js",[],"C:\\codebase\\tokopedia-test\\src\\reportWebVitals.js",[],"C:\\codebase\\tokopedia-test\\src\\containers\\PokemonsContainer.js",[],"C:\\codebase\\tokopedia-test\\src\\components\\PokemonsList.js",[],"C:\\codebase\\tokopedia-test\\src\\containers\\Navbar.js",[],"C:\\codebase\\tokopedia-test\\src\\pages\\Home.js",["140"],"import React from 'react'; // eslint-disable-line no-use-before-define\r\nimport Fab from '@material-ui/core/Fab';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport {PokemonsContainer} from \"../containers/PokemonsContainer\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\r\nimport Container from '@material-ui/core/Container';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport {css, jsx} from '@emotion/react'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nfunction ScrollTop(props) {\r\n    const {children, window} = props;\r\n    const classes = useStyles();\r\n    const trigger = useScrollTrigger({\r\n        target: window ? window() : undefined,\r\n        disableHysteresis: true,\r\n        threshold: 100\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\r\n\r\n        if (anchor) {\r\n            anchor.scrollIntoView({behavior: 'smooth', block: 'center'});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Zoom in={trigger}>\r\n            <div onClick={handleClick}\r\n                role=\"presentation\"\r\n                className={\r\n                    classes.root\r\n            }>\r\n                {children} </div>\r\n        </Zoom>\r\n    );\r\n}\r\n\r\nfunction Home(props) {\r\n    let clearKeys = [\"pokeImg\", \"pokeName\"]\r\n    return (\r\n        <>\r\n        {clearKeys.forEach(k =>localStorage.removeItem(k))}\r\n        <Hidden mdDown>\r\n            <div css={\r\n                css `\r\n                    background: url('/img/home.png') center center/cover no-repeat;\r\n                    height: 90vh;\r\n                    width: 100%;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    object-fit: contain;\r\n                    `\r\n            }></div>\r\n            </Hidden>\r\n\r\n            <Hidden only={['lg', 'xl', 'xs']}>\r\n            <div css={\r\n                css `\r\n                    background: url('/img/home-md.png') center center/cover no-repeat;\r\n                    height: 110vh;\r\n                    width: 100%;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    object-fit: contain;\r\n                    `\r\n            }></div>\r\n            </Hidden>\r\n            \r\n            \r\n            <Hidden smUp>\r\n            <div css={\r\n                css `\r\n                    background: url('/img/home-xs.png') center center/cover no-repeat;\r\n                    height: 80vh;\r\n                    width: 100%;\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    justify-content: center;\r\n                    align-items: center;\r\n                    object-fit: contain;\r\n                    `\r\n            }></div>\r\n            </Hidden>\r\n            <Toolbar id=\"back-to-top-anchor\"/>\r\n            <Container maxWidth={'xl'}>\r\n                <PokemonsContainer/>\r\n            </Container>\r\n            <ScrollTop {...props}>\r\n                <Fab color=\"secondary\" size=\"large\" aria-label=\"scroll back to top\">\r\n                    <KeyboardArrowUpIcon/>\r\n                </Fab>\r\n            </ScrollTop>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","C:\\codebase\\tokopedia-test\\src\\components\\NavbarCollapse.js",[],"C:\\codebase\\tokopedia-test\\src\\components\\ButtonNavbarCollapse.js",[],"C:\\codebase\\tokopedia-test\\src\\pages\\Pokebag.js",[],"C:\\codebase\\tokopedia-test\\src\\pages\\PokemonDetail.js",["141","142","143","144","145","146"],"import React, { useState, useEffect } from \"react\";\r\nimport { PokemonDetailContainer } from \"../containers/PokemonDetailContainer\";\r\nimport Fab from '@material-ui/core/Fab';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport { Box, Button, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport {css, jsx} from '@emotion/react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport disableScroll from 'disable-scroll';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n      position: 'fixed',\r\n      bottom: theme.spacing(4),\r\n      right: theme.spacing(4)\r\n  },\r\n  imgButton:{\r\n    width: 250,\r\n    height: 250,\r\n  },\r\n  dialogRoot:{\r\n    borderRadius: '2rem'\r\n  }\r\n}));\r\n\r\nconst CustomButton = withStyles((theme) => ({\r\n  root: ({value}) => ({\r\n    color: theme.palette.getContrastText(\"#F0CE00\"),\r\n    backgroundColor: \"#F0CE00\",\r\n    '&:hover': {\r\n      backgroundColor: yellow[600],\r\n    },\r\n    borderRadius: '2rem',\r\n    fontSize: '1em',\r\n    height: 70,\r\n    width: 234,\r\n    disabled: value\r\n  }),\r\n}))(Button);\r\n\r\nfunction ClickableFAB(props) {\r\n  const {children} = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className={classes.root}>\r\n          {children}\r\n      </div>\r\n);\r\n}\r\n\r\nfunction PokemonDetail(props) {\r\n  const classes = useStyles();\r\n  const [open1, setOpen1] = useState(false);\r\n  const [openFailed, setOpenFailed] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [status, setStatus] = useState(false);\r\n  const [isActive, setActive] = useState(true);\r\n  const [btnDisabled, setBtnDisabled] = useState(true);\r\n  const [inputRef, setInputRef] = useState(\"\");\r\n  const [inventory, setInventory] = useState([]);\r\n\r\n  const handleClickOpen1 = () => {\r\n    setOpen1(true);\r\n  };\r\n  const handleClose1 = () => {\r\n    setOpen1(false);\r\n  };\r\n  const handleFailed = () => {\r\n    setOpenFailed(false);\r\n  };\r\n  const handleSuccess = () => {\r\n    setStatus(true);\r\n    if(status){\r\n      // if(!localStorage['inventory']){\r\n      //   setInventory([{\r\n      //     name: localStorage.getItem(\"pokeName\"),\r\n      //     collections: [{\r\n      //       nickName: inputRef,\r\n      //     }]\r\n      //   }]);\r\n        \r\n      //   console.log(inventory);\r\n      //   } else {\r\n          var prev = JSON.parse(localStorage.getItem(\"inventory\"));\r\n          setInventory(prevstate => ({\r\n            name: localStorage.getItem(\"pokeName\"),\r\n            collections: [{\r\n              nickName: prevstate.collections.concat(inputRef),\r\n            }]\r\n          }));\r\n        // }\r\n    }\r\n    \r\n    setInputRef(\"\");\r\n    localStorage.setItem(\"inventory\", JSON.stringify(inventory));\r\n    setOpenSuccess(false);\r\n  };\r\n\r\n  const handleCatch = () => {\r\n    setActive(false);\r\n  };\r\n  useEffect(() => {\r\n    if (!isActive) {\r\n      setTimeout(function(){setActive(true); disableScroll.on();\r\n        if(true){\r\n          setOpenSuccess(true);\r\n          console.log(\"dapet\");\r\n        } else {\r\n          setStatus(false);\r\n          setOpenFailed(true);\r\n          console.log(\"lepas\");\r\n        }\r\n      }, 1000); \r\n    }\r\n    if (open1){\r\n      setOpen1(false);\r\n    }\r\n\r\n\r\n  }, [isActive, disableScroll.off()]);\r\n\r\n \r\n\r\n\r\n  return (\r\n    <LoadingOverlay\r\n      active={!isActive}\r\n      spinner={<Box mb={4}><Paper elevation={0} css={css`\r\n      width:200px;\r\n      height:200px;\r\n      background: url('/img/pokeball.png') center center/cover no-repeat;`}></Paper></Box>}\r\n      text='Catching...'>\r\n      <PokemonDetailContainer />\r\n      <ClickableFAB>\r\n      <Fab onClick={handleClickOpen1} variant=\"round\" css={css`\r\n          width:100px;\r\n          height:100px;\r\n          background: url('/img/pokeball.png') center center/cover no-repeat;`}>\r\n      </Fab>\r\n      </ClickableFAB>\r\n\r\n      <Dialog \r\n      classes={{paper: classes.dialogRoot}}\r\n      disableEscapeKeyDown={true}\r\n      disableBackdropClick={true}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      open={openSuccess}\r\n      fullWidth={true}>\r\n        <DialogTitle>\r\n        <Box mt={3}>\r\n        <Typography variant=\"h3\" align=\"center\" style={{ color: green[500] }}>\r\n         <CheckCircleIcon fontSize=\"large\" style={{ color: green[500] }} /> Success!\r\n        </Typography>\r\n        </Box>\r\n\r\n        <Box my={1}>\r\n        <Typography variant=\"h5\" align=\"center\">\r\n          Congratulations trainer! <strong>{localStorage.getItem(\"pokeName\")}</strong> is yours now\r\n        </Typography>\r\n        </Box>\r\n        <Box my={1}>\r\n        <Typography variant=\"body1\" align=\"center\" css={css`opacity: 0.8`}>\r\n          Give it the best name and make it your greatest partner!\r\n        </Typography>\r\n        </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n\r\n          <Paper\r\n            elevation={0}\r\n            css={css`\r\n              text-align: center;\r\n              border-radius: 2rem;\r\n              `}>\r\n            <img\r\n              src={\r\n                localStorage.getItem(\"pokeImg\")\r\n              }\r\n              css={css`\r\n                width: 150px;\r\n                height: 150px;    \r\n                -webkit-filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n                filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n              `}\r\n            />\r\n          </Paper>    \r\n          \r\n          <Grid container direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n            <Grid item xs={12}>\r\n          <Box my={3}>\r\n            <TextField\r\n            value={inputRef}\r\n        placeholder=\"e.g. Nakama\"\r\n        label=\"Name\"  \r\n        onChange={(text) => (setBtnDisabled(!text.target.value), setInputRef(text.target.value))}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        variant=\"outlined\"\r\n        color=\"secondary\"/>\r\n          </Box>\r\n          </Grid>\r\n          </Grid>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n            <Grid item xs={12}>\r\n              <Box mb={4}>\r\n              <CustomButton disabled={btnDisabled} onClick={handleSuccess}><Typography \r\n                css={css`\r\n                  font-weight: 800;\r\n                `}>Done</Typography></CustomButton>   \r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog \r\n      classes={{paper: classes.dialogRoot}}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      open={openFailed}\r\n      fullWidth={true}>\r\n        <DialogTitle>\r\n        <Box mt={3}>\r\n        <Typography variant=\"h3\" align=\"center\" style={{ color: red[500] }}>\r\n         <CancelIcon fontSize=\"large\" style={{ color: red[500] }} /> Failed\r\n        </Typography>\r\n          \r\n        </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n\r\n          <Box mb={8}>\r\n          <Typography variant=\"h4\" align=\"center\">\r\n            Oops <strong>{localStorage.getItem(\"pokeName\")}</strong> has run away, better luck next time trainer!\r\n          </Typography>\r\n          </Box>            \r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n            <Grid item xs={12}>\r\n              <Box mb={4}>\r\n              <CustomButton onClick={handleFailed}><Typography \r\n                css={css`\r\n                  font-weight: 800;\r\n                `}>Dismiss</Typography></CustomButton>   \r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n      fullWidth={true}\r\n        classes={{paper: classes.dialogRoot}}\r\n        open={open1}  \r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose1}>\r\n        <DialogTitle>\r\n          <Box my={3}>\r\n        <Typography variant=\"h5\" align=\"center\">\r\n          Wow.. great choice, trainer! \r\n        </Typography>\r\n          \r\n        <Typography variant=\"h5\" align=\"center\">\r\n           Ready to catch <strong>{localStorage.getItem(\"pokeName\")}</strong>?\r\n        </Typography>\r\n        </Box>\r\n        <Box my={1}>\r\n        <Typography variant=\"body1\" align=\"center\" css={css`opacity: 0.5`}>\r\n           *Probability rate is 50%\r\n        </Typography>\r\n        </Box>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n          <Paper\r\n            elevation={0}\r\n            css={css`\r\n              text-align: center;\r\n              border-radius: 2rem;\r\n              `}>\r\n            <img\r\n              src={\r\n                localStorage.getItem(\"pokeImg\")\r\n              }\r\n              css={css`\r\n                width: 150px;\r\n                height: 150px;    \r\n                -webkit-filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n                filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n              `}\r\n            />\r\n          </Paper>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Grid container direction=\"column\" alignContent=\"center\" justify=\"center\">\r\n            <Grid item xs={12}>\r\n              <CustomButton onClick={handleCatch}><Typography \r\n                css={css`\r\n                  font-weight: 800;\r\n                `}>CATCH</Typography></CustomButton>   \r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Box mt={2} mb={4}>\r\n                  <Button onClick={handleClose1}>\r\n                    <Typography>I'll come back next time!</Typography>\r\n                  </Button>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogActions>\r\n      </Dialog>\r\n      </LoadingOverlay>\r\n  );\r\n}\r\n\r\nexport default PokemonDetail;\r\n","C:\\codebase\\tokopedia-test\\src\\containers\\PokemonDetailContainer.js",["147","148"],"import React, { useState, useEffect }  from \"react\";\r\nimport { getPokemon } from \"../services/RestServices\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {PokemonDetailList} from \"../components/PokemonDetailList\";\r\n\r\n\r\nexport function PokemonDetailContainer() {\r\n    let { id } = useParams();\r\n    let isSubscribed = true\r\n    const [pokemonData, setPokemonData] = useState(null)\r\n    const [loading, setLoading] = useState(true);\r\n    const initialURL = 'https://pokeapi.co/api/v2/pokemon/';\r\n\r\n    const loadPokemonMoves = async (data) => {\r\n        let _pokemonData = await Promise.all(data.moves.map(async x => {\r\n          let pokemonRecord = await getPokemon(x.move.url)\r\n          return pokemonRecord\r\n        }))\r\n        if(isSubscribed){        \r\n          setLoading(false);\r\n          setPokemonData({\r\n            ...data,\r\n            moves_detail: [..._pokemonData]\r\n        });\r\n      }\r\n\r\n      }\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n          return await getPokemon(initialURL + id);\r\n        }\r\n        fetchData().then( x => {\r\n                loadPokemonMoves(x);\r\n\r\n        })\r\n        \r\n        return () => isSubscribed = false\r\n      }, [])\r\n\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {pokemonData !== null ? (\r\n                <PokemonDetailList\r\n                    pokemon={pokemonData}>\r\n\r\n                    </PokemonDetailList>\r\n            ) : <CircularProgress />}\r\n                    \r\n        </>\r\n        \r\n    )\r\n}\r\n","C:\\codebase\\tokopedia-test\\src\\components\\PokemonDetailList.js",["149","150","151"],"import React, { useState, useEffect }from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Container,\r\n  Paper,\r\n  Box,\r\n  CircularProgress\r\n} from \"@material-ui/core\";\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport HistoryIcon from \"@material-ui/icons/History\";\r\nimport OfflineBoltIcon from '@material-ui/icons/OfflineBolt';\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { css, jsx, ThemeProvider } from \"@emotion/react\";\r\nimport { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { typeLabelColors } from \"../helpers/typeColors\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { getPokemon } from \"../services/RestServices\";\r\nimport {AutoSizer, Column, Table} from 'react-virtualized';\r\nimport 'react-virtualized/styles.css';\r\n\r\nfunction PokemonAbilityContainer({abilityURL}) {\r\n  const [abilityData, setAbilityData] = useState(null)\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true\r\n      async function fetchData() {\r\n        return await getPokemon(abilityURL);\r\n      }\r\n      fetchData().then( x => {\r\n        if(isSubscribed){     \r\n            setAbilityData(x);\r\n        }\r\n    })\r\n      \r\n      return () => isSubscribed = false\r\n    }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      {abilityData !== null ? (\r\n        <>\r\n        {abilityData.effect_entries.map((x) => \r\n          <Typography variant=\"body1\" key={x.effect} align=\"justify\">\r\n              {x.language.name == \"en\" && x.effect}\r\n           </Typography>\r\n        )}\r\n        </>\r\n      ) : <CircularProgress />}\r\n    </>\r\n      \r\n  )\r\n}\r\n\r\nexport const PokemonDetailList = React.memo(function PokemonDetail({\r\n  pokemon,\r\n}) {\r\n  let { id, name } = useParams();\r\n  let typoTheme = responsiveFontSizes(createMuiTheme());\r\n  return (\r\n    <>\r\n    {localStorage.setItem(\"pokeName\", name.charAt(0).toUpperCase() + name.slice(1))}\r\n      <Container maxWidth={\"xl\"}>\r\n      <Box>\r\n              <Typography\r\n                variant=\"h4\"\r\n                css={css`\r\n                  font-weight: 600;\r\n                  opacity: 0.37;\r\n                  display: inline;\r\n                `}\r\n              >\r\n                {(\"0000\" + id).slice(-\"0000\".length)}\r\n              </Typography>\r\n\r\n              <Typography\r\n                variant=\"h4\"\r\n                css={css`\r\n                  font-weight: 600;\r\n                  display: inline;\r\n                  margin-left: 1rem;\r\n                `}\r\n              >\r\n                {name.charAt(0).toUpperCase() + name.slice(1)}\r\n              </Typography>\r\n            </Box>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          spacing={4}>\r\n          <Grid item xs={12} sm={12} md={6} xl={6}>\r\n            <Box mt={3}>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n              >\r\n                <Grid item xs={12} sm={12}>\r\n                  <Paper\r\n                    elevation={1}\r\n                    css={css`\r\n                      text-align: center;\r\n                      border-radius: 2rem;\r\n                      background: radial-gradient(circle, ${typeLabelColors[pokemon.types[0].type.name]} 15%, ${pokemon.types.length > 1 ? typeLabelColors[pokemon.types[1].type.name] : typeLabelColors[pokemon.types[0].type.name]} 100%);\r\n                    `}\r\n                  >\r\n                    {localStorage.setItem(\"pokeImg\", pokemon.sprites.other[\"official-artwork\"].front_default)}\r\n                    <img\r\n                      src={\r\n                        pokemon.sprites.other[\"official-artwork\"].front_default\r\n                      }\r\n                      css={css`\r\n                        width: 250px;\r\n                        height: 250px;    \r\n                        -webkit-filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n                        filter: drop-shadow(5px 5px 7px rgba(0, 0, 0, 0.5));\r\n                      `}\r\n                    />\r\n                  </Paper>\r\n                </Grid>\r\n                <Box mt={3}>\r\n                  <Grid item xs={12}>\r\n                    <CheckCircleIcon\r\n                      fontSize=\"large\"\r\n                      css={css`\r\n                        color: #2f79d9;\r\n                        display: inline;\r\n                        margin-right: 1rem;\r\n                      `}\r\n                    />\r\n                    <ThemeProvider theme={typoTheme}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        css={css`\r\n                          display: inline;\r\n                        `}\r\n                      >\r\n                        Owned: 0\r\n                      </Typography>\r\n                    </ThemeProvider>\r\n                  </Grid>\r\n                </Box>\r\n                <Box mt={1}>\r\n                  <Grid\r\n                    item\r\n                    xs={12}\r\n                    css={css`\r\n                      display: flex;\r\n                      align-items: center;\r\n                      flex-wrap: wrap;\r\n                    `}\r\n                  >\r\n                    <HistoryIcon\r\n                      css={css`\r\n                        margin-right: 0.5rem;\r\n                      `}\r\n                    />\r\n                    <ThemeProvider theme={typoTheme}>\r\n                      <Typography\r\n                        variant=\"h5\"\r\n                        css={css`\r\n                          margin-right: 0.5rem;\r\n                        `}\r\n                      >\r\n                        Last Catch:\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        css={css`\r\n                          opacity: 0.7;\r\n                        `}\r\n                      >\r\n                        20 December 2020 1:45 P.M\r\n                      </Typography>\r\n                    </ThemeProvider>\r\n                  </Grid>\r\n                </Box>\r\n              </Grid>\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={6} xl={6}>\r\n          <Box mt={3}>\r\n              <Typography\r\n                variant=\"h4\"\r\n                css={css`\r\n                  font-weight: 600;\r\n                  display: inline;\r\n                `}\r\n              >\r\n                Type\r\n              </Typography>\r\n            </Box>\r\n            <Box mt={1}>\r\n                {pokemon.types.map((x) => \r\n                    <Chip component={Typography} label={x.type.name.charAt(0).toUpperCase() + x.type.name.slice(1)} \r\n                    css={css`color: white; margin-right: 0.4rem; font-size: 1em; background-color: ${typeLabelColors[x.type.name]}`}/>\r\n\r\n                )}                \r\n            </Box>\r\n\r\n            <Box mt={5}>\r\n              <Typography\r\n                variant=\"h4\"\r\n                css={css`\r\n                  font-weight: 600;\r\n                  display: inline;\r\n                `}\r\n              >\r\n                Abilities & Skills\r\n              </Typography>\r\n            </Box>         \r\n\r\n            {pokemon.abilities.map((x) =>\r\n            <>\r\n            <Box mt={1} css={css`\r\n                      display: flex;\r\n                      align-items: center;\r\n                      flex-wrap: wrap;`}>\r\n              <OfflineBoltIcon css={css`margin-right: 0.5rem; color: #2f79d9;`}/>\r\n              <Typography variant=\"h6\" css={css`font-style: italic; font-weight: 600`}>\r\n                  {x.ability.name.charAt(0).toUpperCase() + x.ability.name.slice(1)}\r\n              </Typography>\r\n            </Box>\r\n            \r\n            <Box ml={4}>\r\n                <PokemonAbilityContainer abilityURL={x.ability.url} />\r\n            </Box>   \r\n            </>\r\n            )}\r\n            \r\n            <Box my={2}>\r\n                    <NavLink to=\"/pokebag\">\r\n                      <Typography\r\n                        css={css`\r\n                          font-weight: 600;\r\n                          display: flex;\r\n                          flex-wrap: wrap;\r\n                          float: right;\r\n                        `}\r\n                      >\r\n                        Check My {name.charAt(0).toUpperCase() + name.slice(1)}{\" \"}\r\n                        <ChevronRightIcon />\r\n                      </Typography>\r\n                    </NavLink>\r\n                  </Box>                   \r\n          </Grid>\r\n        </Grid>\r\n        <Box my={3}>\r\n        <Divider variant=\"middle\" />\r\n        </Box>\r\n        <Box mt={2}>\r\n          \r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"flex-start\"\r\n          alignItems=\"center\">\r\n            <Grid item xs={12}>\r\n            <Box mt={1}>\r\n              <Typography\r\n                variant=\"h4\"\r\n                css={css`\r\n                  font-weight: 600;\r\n                  display: inline;\r\n                `}>\r\n                Moves\r\n              </Typography>\r\n            </Box>         \r\n            </Grid>\r\n            <Grid item xs={12}>\r\n  <Box mt={2}>\r\n    <AutoSizer disableHeight>\r\n      {({width}) => (\r\n\r\n<Table     \r\n  width={width}\r\n  height={300}\r\n  headerHeight={40}\r\n  rowHeight={50}\r\n  rowStyle={{alignItems: \"stretch\"}}\r\n  rowCount={pokemon.moves.length}\r\n  rowGetter={({index}) => pokemon.moves_detail[index]}>\r\n    <Column flexGrow={1} label=\"Name\" width={50} dataKey=\"name\" headerRenderer={({label}) => <Typography css={css`font-weight: 600;`}>{label}</Typography>} cellRenderer={({rowData})=> <Typography variant=\"caption\">{rowData.name.charAt(0).toUpperCase() + rowData.name.slice(1)}</Typography>}/>\r\n    <Column flexGrow={1} label=\"Class\" width={50} dataKey=\"class\" headerRenderer={({label}) => <Typography css={css`font-weight: 600;`}>{label}</Typography>} cellRenderer={({rowData})=><Typography variant=\"caption\">{rowData.damage_class.name.charAt(0).toUpperCase() + rowData.damage_class.name.slice(1)}</Typography>}/>\r\n    <Column flexGrow={1} label=\"Type\" width={50} dataKey=\"type\" headerRenderer={({label}) => <Typography css={css`font-weight: 600; `}>{label}</Typography>} cellRenderer={({rowData})=> <Chip component={Typography} label={rowData.type.name.charAt(0).toUpperCase() + rowData.type.name.slice(1)} \r\n    css={css`color: white; font-size: 1em; background-color: ${typeLabelColors[rowData.type.name]}`}/>}/>\r\n</Table>\r\n      )}\r\n        </AutoSizer>\r\n        </Box>\r\n        </Grid>\r\n        </Grid>\r\n        </Box>\r\n      \r\n      </Container>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default PokemonDetailList;\r\n","C:\\codebase\\tokopedia-test\\src\\services\\GqlServices.js",[],"C:\\codebase\\tokopedia-test\\src\\services\\RestServices.js",[],"C:\\codebase\\tokopedia-test\\src\\helpers\\typeColors.js",[],"C:\\codebase\\tokopedia-test-source\\src\\index.js",[],["152","153"],"C:\\codebase\\tokopedia-test-source\\src\\App.js",[],"C:\\codebase\\tokopedia-test-source\\src\\reportWebVitals.js",[],"C:\\codebase\\tokopedia-test-source\\src\\pages\\Pokebag.js",["154","155","156"],"C:\\codebase\\tokopedia-test-source\\src\\containers\\Navbar.js",[],"C:\\codebase\\tokopedia-test-source\\src\\pages\\Home.js",["157","158"],"C:\\codebase\\tokopedia-test-source\\src\\pages\\PokemonDetail.js",["159","160","161","162"],"C:\\codebase\\tokopedia-test-source\\src\\containers\\PokemonsContainer.js",[],"C:\\codebase\\tokopedia-test-source\\src\\containers\\PokemonDetailContainer.js",["163","164"],"C:\\codebase\\tokopedia-test-source\\src\\components\\NavbarCollapse.js",[],"C:\\codebase\\tokopedia-test-source\\src\\components\\PokemonsList.js",["165"],"import React from \"react\";\r\nimport Color from 'color';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Waypoint} from \"react-waypoint\";\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport {Palette} from \"react-palette\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    actionArea: {\r\n      borderRadius: 16,\r\n      transition: '0.2s',\r\n      '&:hover': {\r\n        transform: 'scale(1.1)',\r\n      },\r\n    },\r\n    media: ({color}) => ({\r\n      width: '100%',\r\n      height: 0,\r\n      paddingBottom: '100%',\r\n      backgroundColor: color\r\n    }),\r\n    card: ({ color }) => ({\r\n      borderRadius: 16,\r\n      '&:hover': {\r\n        boxShadow: `0 6px 12px 0 ${Color(color)\r\n          .rotate(-12)\r\n          .darken(0.2)\r\n          .fade(0.5)}`,\r\n      },\r\n    }),\r\n    content: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n      fontSize: '1.1rem',\r\n      fontWeight: 900,\r\n      color: '#000',\r\n      textTransform: 'capitalize',\r\n    },\r\n    subtitle: {\r\n      color: '#000',\r\n      opacity: 0.87,\r\n      marginTop: '0.5rem',\r\n      fontWeight: 500,\r\n      fontSize: 14,\r\n    },  \r\n    contentTag: {\r\n      position: 'flex',\r\n      bottom: 0,\r\n      width: '100%',\r\n      zIndex: 1,\r\n      padding: '1rem 0.5rem',\r\n    },\r\n    tag: ({color}) => ( {\r\n      display: 'inline-block',\r\n      backgroundColor: color,\r\n      borderRadius: '0.5rem',\r\n      padding: '2px 0.5rem',\r\n      color: '#fff',\r\n      marginBottom: '0.5rem',\r\n      fontWeight: \"bold\",\r\n      fontSize: 18,\r\n      float: 'right'\r\n    }),\r\n  \r\n}));\r\n\r\nconst CustomCard = ({ classes, image, title, subtitle, id, name, loading }) => {\r\n\r\n  return (\r\n    <CardActionArea className={classes.actionArea} component={NavLink} to={\"/detail/\"+id+\"/\"+name}>\r\n      <Card className={classes.card} >\r\n      {loading ? (<Skeleton animation=\"wave\" variant=\"rect\"/>) : \r\n      (<CardMedia className={classes.media} image={image}>\r\n            <div className={classes.contentTag}>\r\n        <div className={classes.tag}>{(('0000') + id).slice(-('0000').length)}</div>\r\n      </div>\r\n      </CardMedia>)}\r\n    {\r\n    loading ? (\r\n        <React.Fragment>\r\n            <Skeleton animation=\"wave\"\r\n                height={10}\r\n                style={\r\n                    {marginBottom: 6}\r\n                }/>\r\n            <Skeleton animation=\"wave\"\r\n                height={10}\r\n                style={\r\n                {marginBottom: 6}\r\n            }/>\r\n        </React.Fragment>\r\n    ) : (\r\n        <CardContent className={classes.content} >\r\n          <Typography className={classes.title} variant={'h2'} noWrap>\r\n            {title}\r\n          </Typography>\r\n          <Typography className={classes.subtitle}>{subtitle}</Typography>\r\n        </CardContent>)}\r\n      </Card>\r\n    </CardActionArea>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport const PokemonList = React.memo(function PokemonLists({pokemons, onLoadMore, loading}){\r\n  const Styles = (colors) => useStyles({color: colors});\r\n  return(\r\n  <div>\r\n  <Grid container\r\n      className={\r\n        Styles.root\r\n      }\r\n      spacing={2}>\r\n      <Grid item\r\n          xs={12} zeroMinWidth>\r\n          <Grid container justify=\"center\"\r\n              spacing={4}>\r\n              {\r\n              pokemons.results.map((x, i) => (\r\n                  <Grid key={\r\n                          x.id\r\n                      }\r\n                      item\r\n                      xs={8}\r\n                      sm={4}\r\n                      md={3}\r\n                      lg={2} >\r\n                      <Palette src={x.image}>\r\n                          {({data}) => (\r\n                            <CustomCard\r\n                            id={x.id}\r\n                            name={x.name}\r\n                            loading = {loading}\r\n                            classes={Styles(data.vibrant)}\r\n                            title={x.name}\r\n                            subtitle={\"Owned : \" + Object.values(JSON.parse(localStorage.getItem(\"inventory\"))).filter(ele => ele.pokeName == x.name.charAt(0).toUpperCase() + x.name.slice(1)\r\n                            ).length}\r\n                            image={x.image}\r\n                        />              \r\n                          )}\r\n                        </Palette>\r\n                      {\r\n                      i === pokemons.results.length - 10 && (\r\n                          <Waypoint onEnter={\r\n                              () => onLoadMore()\r\n                          }/>\r\n                      )\r\n                  } \r\n                  </Grid>\r\n              ))} \r\n              </Grid>\r\n      </Grid>\r\n  </Grid>\r\n</div>\r\n  )\r\n}) \r\n\r\nexport default PokemonList;\r\n","C:\\codebase\\tokopedia-test-source\\src\\components\\PokemonDetailList.js",["166","167","168","169","170"],"C:\\codebase\\tokopedia-test-source\\src\\components\\ButtonNavbarCollapse.js",[],"C:\\codebase\\tokopedia-test-source\\src\\services\\GqlServices.js",[],"C:\\codebase\\tokopedia-test-source\\src\\services\\RestServices.js",[],"C:\\codebase\\tokopedia-test-source\\src\\helpers\\typeColors.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":99,"column":15,"nodeType":"177","messageId":"178","endLine":99,"endColumn":19},{"ruleId":"180","severity":1,"message":"181","line":135,"column":6,"nodeType":"182","endLine":135,"endColumn":37,"suggestions":"183"},{"ruleId":"180","severity":1,"message":"184","line":135,"column":17,"nodeType":"185","endLine":135,"endColumn":36},{"ruleId":"186","severity":1,"message":"187","line":192,"column":13,"nodeType":"188","endLine":202,"endColumn":15},{"ruleId":"189","severity":1,"message":"190","line":212,"column":64,"nodeType":"191","messageId":"192","endLine":212,"endColumn":65},{"ruleId":"186","severity":1,"message":"187","line":306,"column":13,"nodeType":"188","endLine":316,"endColumn":15},{"ruleId":"175","severity":1,"message":"193","line":12,"column":12,"nodeType":"177","messageId":"178","endLine":12,"endColumn":19},{"ruleId":"180","severity":1,"message":"194","line":38,"column":37,"nodeType":"195","endLine":38,"endColumn":42},{"ruleId":"180","severity":1,"message":"196","line":41,"column":8,"nodeType":"182","endLine":41,"endColumn":10,"suggestions":"197"},{"ruleId":"198","severity":1,"message":"199","line":50,"column":32,"nodeType":"200","messageId":"201","endLine":50,"endColumn":34},{"ruleId":"186","severity":1,"message":"187","line":116,"column":21,"nodeType":"188","endLine":126,"endColumn":23},{"ruleId":"171","replacedBy":"202"},{"ruleId":"173","replacedBy":"203"},{"ruleId":"175","severity":1,"message":"204","line":11,"column":8,"nodeType":"177","messageId":"178","endLine":11,"endColumn":16},{"ruleId":"175","severity":1,"message":"205","line":116,"column":12,"nodeType":"177","messageId":"178","endLine":116,"endColumn":13},{"ruleId":"186","severity":1,"message":"187","line":215,"column":11,"nodeType":"188","endLine":223,"endColumn":13},{"ruleId":"175","severity":1,"message":"176","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"206","severity":1,"message":"207","line":54,"column":5,"nodeType":"208","messageId":"209","endLine":54,"endColumn":145},{"ruleId":"180","severity":1,"message":"181","line":127,"column":6,"nodeType":"182","endLine":127,"endColumn":61,"suggestions":"210"},{"ruleId":"180","severity":1,"message":"184","line":127,"column":41,"nodeType":"185","endLine":127,"endColumn":60},{"ruleId":"186","severity":1,"message":"187","line":184,"column":13,"nodeType":"188","endLine":194,"endColumn":15},{"ruleId":"186","severity":1,"message":"187","line":299,"column":13,"nodeType":"188","endLine":309,"endColumn":15},{"ruleId":"175","severity":1,"message":"193","line":12,"column":12,"nodeType":"177","messageId":"178","endLine":12,"endColumn":19},{"ruleId":"180","severity":1,"message":"194","line":38,"column":37,"nodeType":"195","endLine":38,"endColumn":42},{"ruleId":"198","severity":1,"message":"199","line":149,"column":140,"nodeType":"200","messageId":"201","endLine":149,"endColumn":142},{"ruleId":"180","severity":1,"message":"196","line":42,"column":8,"nodeType":"182","endLine":42,"endColumn":43,"suggestions":"211"},{"ruleId":"180","severity":1,"message":"184","line":42,"column":9,"nodeType":"185","endLine":42,"endColumn":42},{"ruleId":"175","severity":1,"message":"212","line":64,"column":10,"nodeType":"177","messageId":"178","endLine":64,"endColumn":17},{"ruleId":"189","severity":1,"message":"190","line":70,"column":84,"nodeType":"191","messageId":"192","endLine":70,"endColumn":85},{"ruleId":"186","severity":1,"message":"187","line":120,"column":21,"nodeType":"188","endLine":130,"endColumn":23},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'prev' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'open1'. Either include it or remove the dependency array.","ArrayExpression",["215"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'loading' is assigned a value but never used.","Assignments to the 'isSubscribed' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'abilityURL'. Either include it or remove the dependency array.",["216"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["213"],["214"],"'Skeleton' is defined but never used.","'_' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["217"],["218"],"'updated' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"221","fix":"225"},"Update the dependencies array to be: [isActive, open1]",{"range":"226","text":"227"},"Update the dependencies array to be: [abilityURL]",{"range":"228","text":"229"},"Update the dependencies array to be: [inventory, openSuccess, isActive, open1]",{"range":"230","text":"231"},{"range":"232","text":"229"},[3907,3938],"[isActive, open1]",[1385,1387],"[abilityURL]",[3883,3938],"[inventory, openSuccess, isActive, open1]",[1450,1485]]